//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImdbClient.ImdbServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImdbServiceReference.IImdbRepository")]
    public interface IImdbRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMovies", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesResponse")]
        ImdbServiceApp.Movies[] GetAllMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMovies", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesResponse")]
        System.Threading.Tasks.Task<ImdbServiceApp.Movies[]> GetAllMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMoviesByPredicate", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesByPredicateResponse")]
        ImdbServiceApp.Movies[] GetAllMoviesByPredicate(string predicate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMoviesByPredicate", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesByPredicateResponse")]
        System.Threading.Tasks.Task<ImdbServiceApp.Movies[]> GetAllMoviesByPredicateAsync(string predicate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMoviesByPredicateCount", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesByPredicateCountResponse")]
        int GetAllMoviesByPredicateCount(string predicate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMoviesByPredicateCount", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesByPredicateCountResponse")]
        System.Threading.Tasks.Task<int> GetAllMoviesByPredicateCountAsync(string predicate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMoviesPaged", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesPagedResponse")]
        ImdbServiceApp.Movies[] GetAllMoviesPaged(string predicate, int pagesize, int startindex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMoviesPaged", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesPagedResponse")]
        System.Threading.Tasks.Task<ImdbServiceApp.Movies[]> GetAllMoviesPagedAsync(string predicate, int pagesize, int startindex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/AddMovie", ReplyAction="http://tempuri.org/IImdbRepository/AddMovieResponse")]
        int AddMovie(ImdbServiceApp.Movies movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/AddMovie", ReplyAction="http://tempuri.org/IImdbRepository/AddMovieResponse")]
        System.Threading.Tasks.Task<int> AddMovieAsync(ImdbServiceApp.Movies movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMoviesById", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesByIdResponse")]
        ImdbServiceApp.Movies GetAllMoviesById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/GetAllMoviesById", ReplyAction="http://tempuri.org/IImdbRepository/GetAllMoviesByIdResponse")]
        System.Threading.Tasks.Task<ImdbServiceApp.Movies> GetAllMoviesByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/UpdateMovie", ReplyAction="http://tempuri.org/IImdbRepository/UpdateMovieResponse")]
        int UpdateMovie(ImdbServiceApp.Movies movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/UpdateMovie", ReplyAction="http://tempuri.org/IImdbRepository/UpdateMovieResponse")]
        System.Threading.Tasks.Task<int> UpdateMovieAsync(ImdbServiceApp.Movies movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/DeleteMovieById", ReplyAction="http://tempuri.org/IImdbRepository/DeleteMovieByIdResponse")]
        int DeleteMovieById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImdbRepository/DeleteMovieById", ReplyAction="http://tempuri.org/IImdbRepository/DeleteMovieByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteMovieByIdAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImdbRepositoryChannel : ImdbClient.ImdbServiceReference.IImdbRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImdbRepositoryClient : System.ServiceModel.ClientBase<ImdbClient.ImdbServiceReference.IImdbRepository>, ImdbClient.ImdbServiceReference.IImdbRepository {
        
        public ImdbRepositoryClient() {
        }
        
        public ImdbRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImdbRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImdbRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImdbRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ImdbServiceApp.Movies[] GetAllMovies() {
            return base.Channel.GetAllMovies();
        }
        
        public System.Threading.Tasks.Task<ImdbServiceApp.Movies[]> GetAllMoviesAsync() {
            return base.Channel.GetAllMoviesAsync();
        }
        
        public ImdbServiceApp.Movies[] GetAllMoviesByPredicate(string predicate) {
            return base.Channel.GetAllMoviesByPredicate(predicate);
        }
        
        public System.Threading.Tasks.Task<ImdbServiceApp.Movies[]> GetAllMoviesByPredicateAsync(string predicate) {
            return base.Channel.GetAllMoviesByPredicateAsync(predicate);
        }
        
        public int GetAllMoviesByPredicateCount(string predicate) {
            return base.Channel.GetAllMoviesByPredicateCount(predicate);
        }
        
        public System.Threading.Tasks.Task<int> GetAllMoviesByPredicateCountAsync(string predicate) {
            return base.Channel.GetAllMoviesByPredicateCountAsync(predicate);
        }
        
        public ImdbServiceApp.Movies[] GetAllMoviesPaged(string predicate, int pagesize, int startindex) {
            return base.Channel.GetAllMoviesPaged(predicate, pagesize, startindex);
        }
        
        public System.Threading.Tasks.Task<ImdbServiceApp.Movies[]> GetAllMoviesPagedAsync(string predicate, int pagesize, int startindex) {
            return base.Channel.GetAllMoviesPagedAsync(predicate, pagesize, startindex);
        }
        
        public int AddMovie(ImdbServiceApp.Movies movie) {
            return base.Channel.AddMovie(movie);
        }
        
        public System.Threading.Tasks.Task<int> AddMovieAsync(ImdbServiceApp.Movies movie) {
            return base.Channel.AddMovieAsync(movie);
        }
        
        public ImdbServiceApp.Movies GetAllMoviesById(string id) {
            return base.Channel.GetAllMoviesById(id);
        }
        
        public System.Threading.Tasks.Task<ImdbServiceApp.Movies> GetAllMoviesByIdAsync(string id) {
            return base.Channel.GetAllMoviesByIdAsync(id);
        }
        
        public int UpdateMovie(ImdbServiceApp.Movies movie) {
            return base.Channel.UpdateMovie(movie);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMovieAsync(ImdbServiceApp.Movies movie) {
            return base.Channel.UpdateMovieAsync(movie);
        }
        
        public int DeleteMovieById(string id) {
            return base.Channel.DeleteMovieById(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMovieByIdAsync(string id) {
            return base.Channel.DeleteMovieByIdAsync(id);
        }
    }
}
